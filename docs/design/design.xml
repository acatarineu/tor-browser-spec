<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
     "file:///usr/share/sgml/docbook/xml-dtd-4.4-1.0-30.1/docbookx.dtd">

<article id="design">
 <articleinfo>
  <title>The Design and Implementation of the Tor Browser [DRAFT]</title>
   <author>
    <firstname>Mike</firstname><surname>Perry</surname>
    <affiliation>
     <address><email>mikeperry#torproject org</email></address>
    </affiliation>
   </author>
   <author>
    <firstname>Erinn</firstname><surname>Clark</surname>
    <affiliation>
     <address><email>erinn_torproject\org</email></address>
    </affiliation>
   </author>
   <author>
    <firstname>Steven</firstname><surname>Murdoch</surname>
    <affiliation>
     <address><email>sjmurdoch#torproject\org</email></address>
    </affiliation>
   </author>
   <pubdate>Sep 29 2011</pubdate>
 </articleinfo>

<!--
- Introduction and Threat model: [Mostly Torbutton]
  - [Remove the security requirements section]
-->

<sect1>
  <title>Introduction</title>
  <para>

This document describes the <link linkend="adversary">adversary model</link>,
<link linkend="DesignRequirements">design requirements</link>,
<link linkend="Implementation">implementation</link>, <link
linkend="Packaging">packaging</link> and <link linkend="Testing">testing
procedures</link> of the Tor Browser. It is
current as of Tor Browser 2.2.32-4.

  </para>
  <para>

This document is also meant to serve as a set of design requirements and to
describe a reference implementation of a Private Browsing Mode that defends
against both local and network adversaries.

  </para>
  <sect2 id="adversary">
   <title>Adversary Model</title>
   <para>

A Tor web browser adversary has a number of goals, capabilities, and attack
types that can be used to guide us towards a set of requirements for the
Tor Browser. Let's start with the goals.

   </para>
   <sect3 id="adversarygoals">
    <title>Adversary Goals</title>
    <orderedlist>
<!-- These aren't really commands.. But it's the closest I could find in an
acceptable style.. Don't really want to make my own stylesheet -->
     <listitem><command>Bypassing proxy settings</command>
     <para>The adversary's primary goal is direct compromise and bypass of 
Tor, causing the user to directly connect to an IP of the adversary's
choosing.</para>
     </listitem>
     <listitem><command>Correlation of Tor vs Non-Tor Activity</command>
     <para>If direct proxy bypass is not possible, the adversary will likely
happily settle for the ability to correlate something a user did via Tor with
their non-Tor activity. This can be done with cookies, cache identifiers,
javascript events, and even CSS. Sometimes the fact that a user uses Tor may
be enough for some authorities.</para>
     </listitem>
     <listitem><command>History disclosure</command>
     <para>
The adversary may also be interested in history disclosure: the ability to
query a user's history to see if they have issued certain censored search
queries, or visited censored sites.
     </para>
     </listitem>
     <listitem><command>Location information</command>
     <para>

Location information such as timezone and locality can be useful for the
adversary to determine if a user is in fact originating from one of the
regions they are attempting to control, or to zero-in on the geographical
location of a particular dissident or whistleblower.

     </para>
     </listitem>
     <listitem><command>Miscellaneous anonymity set reduction</command>
     <para>

Anonymity set reduction is also useful in attempting to zero in on a
particular individual. If the dissident or whistleblower is using a rare build
of Firefox for an obscure operating system, this can be very useful
information for tracking them down, or at least <link
linkend="fingerprinting">tracking their activities</link>.

     </para>
     </listitem>
     <listitem><command>History records and other on-disk
information</command>
     <para>
In some cases, the adversary may opt for a heavy-handed approach, such as
seizing the computers of all Tor users in an area (especially after narrowing
the field by the above two pieces of information). History records and cache
data are the primary goals here.
     </para>
     </listitem>
    </orderedlist>
   </sect3>

   <sect3 id="adversarypositioning">
    <title>Adversary Capabilities - Positioning</title>
    <para>
The adversary can position themselves at a number of different locations in
order to execute their attacks.
    </para>
    <orderedlist>
     <listitem><command>Exit Node or Upstream Router</command>
     <para>
The adversary can run exit nodes, or alternatively, they may control routers
upstream of exit nodes. Both of these scenarios have been observed in the
wild.
     </para>
     </listitem>
     <listitem><command>Adservers and/or Malicious Websites</command>
     <para>
The adversary can also run websites, or more likely, they can contract out
ad space from a number of different adservers and inject content that way. For
some users, the adversary may be the adservers themselves. It is not
inconceivable that adservers may try to subvert or reduce a user's anonymity 
through Tor for marketing purposes.
     </para>
     </listitem>
     <listitem><command>Local Network/ISP/Upstream Router</command>
     <para>
The adversary can also inject malicious content at the user's upstream router
when they have Tor disabled, in an attempt to correlate their Tor and Non-Tor
activity.
     </para>
     </listitem>
     <listitem><command>Physical Access</command>
     <para>
Some users face adversaries with intermittent or constant physical access.
Users in Internet cafes, for example, face such a threat. In addition, in
countries where simply using tools like Tor is illegal, users may face
confiscation of their computer equipment for excessive Tor usage or just
general suspicion.
     </para>
     </listitem>
    </orderedlist>
   </sect3>

   <sect3 id="attacks">
    <title>Adversary Capabilities - Attacks</title>
    <para>

The adversary can perform the following attacks from a number of different 
positions to accomplish various aspects of their goals. It should be noted
that many of these attacks (especially those involving IP address leakage) are
often performed by accident by websites that simply have Javascript, dynamic 
CSS elements, and plugins. Others are performed by adservers seeking to
correlate users' activity across different IP addresses, and still others are
performed by malicious agents on the Tor network and at national firewalls.

    </para>
    <orderedlist>
     <listitem><command>Inserting Javascript</command>
     <para>
If not properly disabled, Javascript event handlers and timers
can cause the browser to perform network activity after Tor has been disabled,
thus allowing the adversary to correlate Tor and Non-Tor activity and reveal
a user's non-Tor IP address. Javascript
also allows the adversary to execute <ulink
url="http://whattheinternetknowsaboutyou.com/">history disclosure attacks</ulink>:
to query the history via the different attributes of 'visited' links to search
for particular Google queries, sites, or even to <ulink
url="http://www.mikeonads.com/2008/07/13/using-your-browser-url-history-estimate-gender/">profile
users based on gender and other classifications</ulink>. Finally,
Javascript can be used to query the user's timezone via the
<function>Date()</function> object, and to reduce the anonymity set by querying
the <function>navigator</function> object for operating system, CPU, locale, 
and user agent information.
     </para>
     </listitem>

     <listitem><command>Inserting Plugins</command>
     <para>

Plugins are abysmal at obeying the proxy settings of the browser. Every plugin
capable of performing network activity that the author has
investigated is also capable of performing network activity independent of
browser proxy settings - and often independent of its own proxy settings.
Sites that have plugin content don't even have to be malicious to obtain a
user's
Non-Tor IP (it usually leaks by itself), though <ulink
url="http://decloak.net">plenty of active
exploits</ulink> are possible as well. In addition, plugins can be used to store unique identifiers that are more
difficult to clear than standard cookies. 
<ulink url="http://epic.org/privacy/cookies/flash.html">Flash-based
cookies</ulink> fall into this category, but there are likely numerous other
examples.

     </para>
     </listitem>
     <listitem><command>Inserting CSS</command>
     <para>

CSS can also be used to correlate Tor and Non-Tor activity and reveal a user's
Non-Tor IP address, via the usage of
<ulink url="http://www.tjkdesign.com/articles/css%20pop%20ups/">CSS
popups</ulink> - essentially CSS-based event handlers that fetch content via
CSS's onmouseover attribute. If these popups are allowed to perform network
activity in a different Tor state than they were loaded in, they can easily
correlate Tor and Non-Tor activity and reveal a user's IP address. In
addition, CSS can also be used without Javascript to perform <ulink
url="http://ha.ckers.org/weird/CSS-history.cgi">CSS-only history disclosure
attacks</ulink>.
     </para>
     </listitem>
     <listitem><command>Read and insert cookies</command>
     <para>

An adversary in a position to perform MITM content alteration can inject
document content elements to both read and inject cookies for arbitrary
domains. In fact, many "SSL secured" websites are vulnerable to this sort of
<ulink url="http://seclists.org/bugtraq/2007/Aug/0070.html">active
sidejacking</ulink>. In addition, the ad networks of course perform tracking
with cookies as well.

     </para>
     </listitem>
     <listitem><command>Create arbitrary cached content</command>
     <para>

Likewise, the browser cache can also be used to <ulink
url="http://crypto.stanford.edu/sameorigin/safecachetest.html">store unique
identifiers</ulink>. Since by default the cache has no same-origin policy,
these identifiers can be read by any domain, making them an ideal target for
ad network-class adversaries.

     </para>
     </listitem>

     <listitem id="fingerprinting"><command>Fingerprint users based on browser
attributes</command>
<para>

There is an absurd amount of information available to websites via attributes
of the browser. This information can be used to reduce anonymity set, or even
<ulink url="http://mandark.fr/0x000000/articles/Total_Recall_On_Firefox..html">uniquely
fingerprint individual users</ulink>. </para>

<!-- 
<para>
For illustration, let's perform a
back-of-the-envelope calculation on the number of anonymity sets for just the
resolution information available in the <ulink
url="http://developer.mozilla.org/en/docs/DOM:window">window</ulink> and
<ulink
url="http://developer.mozilla.org/en/docs/DOM:window.screen">window.screen</ulink>
objects.


Browser window resolution information provides something like
(1280-640)*(1024-480)=348160 different anonymity sets. Desktop resolution
information contributes about another factor of 5 (for about 5 resolutions in
typical use). In addition, the dimensions and position of the desktop taskbar
are available, which can reveal hints on OS information. This boosts the count
by a factor of 5 (for each of the major desktop taskbars - Windows, OSX, KDE
and Gnome, and None). Subtracting the browser content window
size from the browser outer window size provide yet more information.
Firefox toolbar presence gives about a factor of 8 (3 toolbars on/off give
2<superscript>3</superscript>=8). Interface effects such as title bar font size
and window manager settings gives a factor of about 9 (say 3 common font sizes
for the title bar and 3 common sizes for browser GUI element fonts).
Multiply this all out, and you have (1280-640)*(1024-480)*5*5*8*9 ~=
2<superscript>29</superscript>, or a 29 bit identifier based on resolution
information alone. </para>
-->
<para>

The <ulink
url="https://wiki.mozilla.org/Fingerprinting#Data">Panopticlick study
done</ulink> by the EFF attempts to measure the actual entropy - the number of
identifying bits of information encoded in browser properties.  Their result
data is definitely useful, and the metric is probably the appropriate one for
determining how identifying a particular browser property is. However, some
quirks of their study means that they do not extract as much information as
they could from display information: they only use desktop resolution (which
Torbutton reports as the window resolution) and do not attempt to infer the
size of toolbars.

<!-- XXX: Also, new browser features are added regularly. -->

</para>
     </listitem>
     <listitem><command>Remotely or locally exploit browser and/or
OS</command>
     <para>

Last, but definitely not least, the adversary can exploit either general
browser vulnerabilities, plugin vulnerabilities, or OS vulnerabilities to
install malware and surveillance software. An adversary with physical access
can perform similar actions. Regrettably, this last attack capability is
outside of our ability to defend against, but it is worth mentioning for
completeness. <ulink url="http://tails.boum.org/contribute/design/">The Tails
system</ulink> however can provide some limited defenses against this
adversary.

     </para>
     </listitem>
    </orderedlist>
   </sect3>

  </sect2>
</sect1>

<!--
- Design overview and philosophy
  - Security requirements [Torbutton]
    + local leaks?
    - state issues
  - Privacy Requirements [Mostly blog post]
    - Avoid Cross-Domain Linkability
      - Indentifiers  
      - Fingerprinting
    - 100% self-contained
      - Does not share state with other modes/browsers
      - Easy to remove + wipe with external tools
    - click-to-play for "troublesome" features
   - Philosophy
    - No filters
-->

<sect1 id="DesignRequirements">
  <title>Design Requirements and Philosophy</title>
  <para>

The Tor Browser Design Requirements are meant to describe the properties of a
Private Browsing Mode that defends against both network and local adversaries. 

  </para>
  <para>

There are two main categories of requirements: <link
linkend="security">Security Requirements</link>, and <link
linkend="privacy">Privacy Requirements</link>. Security Requirements are the
minimum properties in order for a web client platform to be able to support
Tor. Privacy requirements are the set of properties that cause us to prefer
one platform over another. 

  </para>
  <para>

We will maintain an alternate distribution of the web client in order to
maintain and/or restore privacy properties to our users. 

  </para>
  <sect2 id="security">
   <title>Security Requirements</title>
   <para>

The security requirements are primarily concerned with ensuring the safe use
of Tor. Violations in these properties typically result in serious risk for
the user in terms of immediate deanonymization and/or observability.

   </para>

<orderedlist> 
 <listitem><command>Proxy Obedience</command> 
 <para>The browser
MUST NOT bypass Tor proxy settings for any content.</para></listitem>

 <listitem><command>State Separation</command> 

 <para>The browser MUST NOT provide any stored state to the content window
from other browsers or other browsing modes, including shared state from
plugins, machine identifiers, and TLS session state.
</para></listitem>

 <listitem><command>Disk Avoidance</command><para>The
browser SHOULD NOT write any browsing history information to disk, or store it
in memory beyond the duration of one Tor session, unless the user has
explicitly opted to store their browsing history information to
disk.</para></listitem>

 <listitem><command>Application Data Isolation</command><para>The browser 
MUST NOT write or cause the operating system to
write <emphasis>any information</emphasis> to disk outside of the application
directory. All exceptions and shortcomings due to operating system behavior
MUST BE documented.

</para></listitem>
 <listitem><command>Update Safety</command><para>The browser SHOULD NOT perform unsafe updates or upgrades.</para></listitem>
</orderedlist>
  </sect2>

  <sect2 id="privacy">
   <title>Privacy Requirements</title>
   <para>

The privacy requirements are primarily concerned with reducing linkability:
the ability for a user's activity on one site to be linked with their
activity on another site without their knowledge or explicit consent.

   </para>

<orderedlist> 
 <listitem><command>Cross-Domain Identifier Unlinkability</command> 
  <para>

User activity on one url bar domain MUST NOT be linkable to their activity in
any other domain by any third party. This property specifically applies to
linkability from stored browser identifiers, authentication tokens, and shared
state. This functionality SHOULD NOT interfere with federated login in a
substantial way.

  </para>
 </listitem>
 <listitem><command>Cross-Domain Fingerprinting Unlinkability</command> 
  <para>

User activity on one url bar domain MUST NOT be linkable to their activity in
any other domain by any third party. This property specifically applies to
linkability from fingerprinting browser behavior.

  </para>
 </listitem>
 <listitem><command>Long-Term Unlinkability</command> 
  <para>

The browser SHOULD provide an obvious, easy way to remove all of their authentication
tokens and browser state and obtain a fresh identity. Additionally, this
should happen by default automatically upon browser restart.

  </para>
 </listitem>
</orderedlist>

  </sect2>
  <sect2 id="philosophy">
  <title>Philosophy</title>
   <para>

In addition to the above design requirements, the technology decisions about
Tor Browser are also guided by some philosophical positions about technology.

   </para>
   <orderedlist>
     <listitem><command>Preserve existing user model</command>
      <para>

The existing way that the user expects to use a browser must be preserved. If
the user has to maintain a different mental model of how the sites they are
using behave depending on tab, browser state, or anything else that would not
normally be what they experience in their default browser, the user will
inevitably be confused. They will make mistakes and reduce their privacy as a
result. Worse, they may just stop using the browser, assuming it is broken.

      </para>
      <para>

User model breakage was one of the <ulink
url="https://blog.torproject.org/blog/toggle-or-not-toggle-end-torbutton">failures
of Torbutton</ulink>: Even if users managed to install everything properly,
the toggle model was too hard for the average user to understand, especially
in the face of accumulating tabs from multiple states crossed with the current
tor-state of the browser. 

      </para>
     </listitem>
     <listitem><command>Favor the implementation mechanism least likely to
break sites</command>
      <para>

In general, we try to find solutions to privacy issues that will not induce
site breakage, though this is not always possible.

      </para>
     </listitem>
     <listitem><command>Plugins must be restricted</command>
      <para>

Even if plugins always properly used the browser proxy settings (which none of
them do) and could not be induced to bypass them (which all of them can), the
activities of closed-source plugins are very difficult to audit and control.
They can obtain and transmit all manner of system information to websites,
often have their own identifier storage for tracking users, and also
contribute to fingerprinting.

      </para>
      <para>

Therefore, if plugins are to be enabled in private browsing modes, they must
be restricted from running automatically on every page (via click-to-play
placeholders), and/or be sandboxed to restrict the types of system calls they
can execute. If the user decides to craft an exemption to allow a plugin to be
used, it MUST ONLY apply to the top level urlbar domain, and not to all sites,
to reduce linkability.

       </para>
     </listitem>
     <listitem><command>Minimize Global Privacy Options</command>
      <para>

<ulink url="https://trac.torproject.org/projects/tor/ticket/3100">Another
failure of Torbutton</ulink> was (and still is) the options panel. Each option
that detectably alters browser behavior can be used as a fingerprinting tool.
Similarly, all extensions <ulink
url="http://blog.chromium.org/2010/06/extensions-in-incognito.html">should be
disabled in the mode</ulink> except as an opt-in basis. We should not load
system-wide addons or plugins.

     </para>
     <para>
Instead of global browser privacy options, privacy decisions should be made
<ulink
url="https://wiki.mozilla.org/Privacy/Features/Site-based_data_management_UI">per
top-level url-bar domain</ulink> to eliminate the possibility of linkability
between domains. For example, when a plugin object (or a Javascript access of
window.plugins) is present in a page, the user should be given the choice of
allowing that plugin object for that top-level url-bar domain only. The same
goes for exemptions to third party cookie policy, geo-location, and any other
privacy permissions.
     </para>
     <para>
If the user has indicated they do not care about local history storage, these
permissions can be written to disk. Otherwise, they should remain memory-only. 
     </para>
     </listitem>
     <listitem><command>No filters</command>
      <para>

Filter-based addons such as <ulink
url="https://addons.mozilla.org/en-US/firefox/addon/adblock-plus/">AdBlock Plus</ulink>, <ulink
url="">Request Policy</ulink>, <ulink url="http://priv3.icsi.berkeley.edu/">Priv3</ulink>, and <ulink
url="http://sharemenot.cs.washington.edu/">Sharemenot</ulink> are to be
avoided. We believe
that these addons do not add any real privacy to a proper <link
linkend="Implementation">implementation</link> of
the above <link linkend="privacy">privacy requirements</link>, as all third parties are prevented from
tracking users between sites by the implementation. Furthermore, filter-based 
addons can introduce strange breakage and cause usability nightmares, and will also
fail to do their job if an adversary simply registers a new domain or creates
a new url path.

<!-- XXX: Don't forget: Filters are also crazy fingerprintable -->
      </para>
      <para>
Furthermore, we are generally opposed to shipping an always-on Ad blocker with
Tor Browser. We feel that this would damage our credibility in terms of
demonstrating that we are providing privacy through a sound design alone, as
well as damage the acceptance of Tor users by sites who support themselves
through advertising revenue.
      </para>
      <para>
Users are free to install these addons if they wish, but doing
so is not recommended, as it will alter the browser request fingerprint.
      </para>
     </listitem>
     <listitem><command>Stay Current</command>
      <para>
We believe that if we do not stay current with the support of new web
technologies, we cannot hope to substantially influence or be involved in
their proper deployment or privacy realization. However, we will likely disable
certain new features (where possible) pending analysis and audit.
      </para>
     </listitem>
   </orderedlist>
  </sect2>
</sect1>

<!--
- Implementation
  - Section Template
    - Sub Section
      - "Design Goal":
      - "Implementation Status"
  - Local Privacy
  - Linkability
    - Stored State
      - Cookies
      - Cache
      - DOM Storage
      - HTTP Auth
      - SSL state
    - Plugins
    - Fingerprinting
      - Location + timezone is part of this
  - Patches?
-->

<sect1 id="Implementation">
  <title>Implementation</title>
  <para>
  </para>
  <sect2 id="proxy-obedience">
   <title>Proxy Obedience</title>
   <para>

Proxy obedience is assured through the following:
   </para>
<orderedlist> 
 <listitem>Firefox Proxy settings
 <para>
  The Torbutton xpi sets the Firefox proxy settings to use Tor directly as a
SOCKS proxy. It sets <command>network.proxy.socks_remote_dns</command>,
<command>network.proxy.socks_version</command>, and
<command>network.proxy.socks_port</command>.
 </para>
</listitem>

 <listitem>Disabling plugins
 <para>
  Plugins have the ability to make arbitrary OS system calls. This includes
the ability to make UDP sockets and send arbitrary data independent of the
browser proxy settings.
 </para>
 <para>
Torbutton disables plugins by using the
<command>@mozilla.org/plugin/host;1</command> service to mark the plugin tags
as disabled. Additionally, we set
<command>plugin.disable_full_page_plugin_for_types</command> to the list of
supported mime types for all currently installed plugins.
 </para> 
 <para>
In addition, to prevent any unproxied activity by plugins at load time, we
also patch the Firefox source code to <ulink
linkend="https://gitweb.torproject.org/torbrowser.git/blob/refs/heads/maint-2.2:/src/current-patches/0007-Block-all-plugins-except-flash.patch">prevent the load of any plugins except
for Flash and Gnash</ulink>.

 </para>
 </listitem>
 <listitem>External App Blocking
  <para>
External apps, if launched automatically, can be induced to load files that
perform network activity. In order to prevent this, Torbutton installs a
component to 
<ulink
linkend="https://gitweb.torproject.org/torbutton.git/blob_plain/HEAD:/src/components/external-app-blocker.js">
provide the user with a popup</ulink> whenever the browser attempts to
launch a helper app. 
  </para>
 </listitem>
 </orderedlist>
  </sect2>
  <sect2 id="state-separation">
   <title>State Separation</title>
   <para>
Tor Browser State is separated from existing browser state through use of a
custom Firefox profile. Furthermore, plugins are disabled, which prevents
Flash cookies from leaking from a pre-existing Flash directory.
   </para>
  </sect2>
  <sect2 id="disk-avoidance">
   <title>Disk Avoidance</title>
   <sect3>
    <title>Design Goal:</title>
    <blockquote>
Tor Browser should optionally prevent all disk records of browser activity.
The user should be able to optionally enable URL history and other history
features if they so desire. Once we <ulink
url="https://trac.torproject.org/projects/tor/ticket/3100">simplify the
preferences interface</ulink>, we will likely just enable Private Browsing
mode by default to handle this goal.
    </blockquote>
   </sect3>
   <sect3>
    <title>Implementation Status:</title>
    <blockquote>
For now, Tor Browser blocks write access to the disk through Torbutton
using several Firefox preferences. 

<!-- XXX: http auth on disk??? -->
<!-- XXX: can general.open_location.last_url hit disk??? -->

The set of prefs is:
<command>dom.storage.enabled</command>,
<command>browser.cache.memory.enable</command>,
<command>network.http.use-cache</command>,
<command>browser.cache.disk.enable</command>,
<command>browser.cache.offline.enable</command>,
<command>general.open_location.last_url</command>,
<command>places.history.enabled</command>,
<command>browser.formfill.enable</command>,
<command>signon.rememberSignons</command>,
<command>browser.download.manager.retention</command>,
and <command>network.cookie.lifetimePolicy</command>.
    </blockquote>
   </sect3>
    <para>
In addition, three Firefox patches are needed to prevent disk writes, even if
Private Browsing Mode is enabled. We need to

<ulink
url="https://gitweb.torproject.org/torbrowser.git/blob/refs/heads/maint-2.2:/src/current-patches/0002-Make-Permissions-Manager-memory-only.patch">prevent
the permissions manager from recording HTTPS STS state</ulink>,
<ulink
url="https://gitweb.torproject.org/torbrowser.git/blob/refs/heads/maint-2.2:/src/current-patches/0003-Make-Intermediate-Cert-Store-memory-only.patch">prevent
intermediate SSL certificates from being recorded</ulink>, and
<ulink
url="https://gitweb.torproject.org/torbrowser.git/blob/refs/heads/maint-2.2:/src/current-patches/0008-Make-content-pref-service-memory-only-clearable.patch">prevent
the content preferences service from recording site zoom</ulink>.

For more details on these patches, <link linkend="firefox-patches">see the
Firefox Patches section</link>.

   </para>
  </sect2>
  <sect2 id="app-data-isolation">
   <title>Application Data Isolation</title>
   <para>

Tor Browser Bundle MUST NOT cause any information to be written outside of the
bundle directory. This is to ensure that the user is able to completely and
safely remove the bundle without leaving other traces of Tor usage on their
computer.

   </para>
   <para>XXX: sjmurdoch, Erinn: explain what magic we do to satisfy this,
and/or what additional work or auditing needs to be done.
   </para>
  </sect2>
<!-- XXX: Write me... 
  <sect2 id="update-safety">
   <title>Update Safety</title>
   <para>
XXX: Write me..
   </para>
  </sect2>
-->
  <sect2 id="identifier-linkability">
   <title>Cross-Domain Identifier Unlinkability</title>
   <!-- XXX: Mention web-send?? -->
   <para>

The Tor Browser MUST prevent a user's activity on one site from being linked
to their activity on another site. When this goal cannot yet be met with an
existing web technology, that technology or functionality is disabled. Our
<link linkend="privacy">design goal</link> is to ultimately eliminate the need to disable arbitrary
technologies, and instead simply alter them in ways that allows them to
function in a backwards-compatible way while avoiding linkability. Users
should be able to use federated login of various kinds to explicitly inform
sites who they are, but that information should not transparently allow a
third party to record their activity from site to site without their prior
consent.

   </para>
   <para>

The benefit of this approach comes not only in the form of reduced
linkability, but also in terms of simplified privacy UI. If all stored browser
state and permissions become associated with the top-level url-bar domain, the
six or seven different pieces of privacy UI governing these identifiers and
permissions can become just one piece of UI. For instance, a window that lists
the top-level url bar domains for which browser state exists with the ability
to clear and/or block them, possibly with a context-menu option to drill down
into specific types of state.

<!-- XXX: Include graphic as a 'Design Goal' -->

   </para>
   <orderedlist>
    <listitem>Cookies
     <para><command>Design Goal:</command>

All cookies should be double-keyed to the top-level domain. There exists a
<ulink
linkend="https://bugzilla.mozilla.org/show_bug.cgi?id=565965">Mozilla
bug</ulink> that contains a prototype patch, but it lacks UI, and does not
apply to modern Firefoxes.

     </para>
     <para><command>Implementation Status:</command>

As a stopgap to satisfy our design requirement of unlinkability, we currently
entirely disable 3rd party cookies by setting
<command>network.cookie.cookieBehavior</command> to 1. We would prefer that
third party content continue to function , but we believe the requirement for 
unlinkability trumps that desire.

     </para>
    </listitem>
    <listitem>Cache
     <para>
Cache is isolated to the top-level url bar domain by using a technique
pioneered by Colin Jackson et al, via their work on <ulink
url="http://www.safecache.com/">SafeCache</ulink>. The technique re-uses the
<ulink
url="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsICachingChannel">nsICachingChannel.cacheKey</ulink>
attribute that Firefox uses internally to prevent improper caching of HTTP POST data.  
     </para>
     <para>
However, to <ulink
url="https://trac.torproject.org/projects/tor/ticket/3666">increase the
security of the isolation</ulink> and to <ulink
url="https://trac.torproject.org/projects/tor/ticket/3754">solve strange and
unknown conflicts with OCSP</ulink>, we had to <ulink
url="https://gitweb.torproject.org/torbrowser.git/blob/refs/heads/maint-2.2:/src/current-patches/0005-Add-a-string-based-cacheKey.patch">patch
Firefox to provide a cacheDomain cache attribute</ulink>. We use the full
url bar domain as input to this field.
     </para>
     <para>

<!-- FIXME: This could use a few more specifics.. Maybe. The Chrome folks
won't care, but the Mozilla folks might. -->
Furthermore, we chose a different isolation scheme than the Stanford
implementation. First, we decoupled the cache isolation from the third party
cookie attribute. Second, we use several mechanisms to attempt to determine
the actual location attribute of the top-level window (the url bar domain)
used to load the page, as opposed to relying solely on the referer property.
     </para>
     <para>
Therefore, <ulink
url="http://crypto.stanford.edu/sameorigin/safecachetest.html">the original
Stanford test
cases</ulink> are expected to fail. Functionality can still be verified by
navigating to <ulink url="about:cache">about:cache</ulink> and viewing the key
used for each cache entry. Each third party element should have an additional
"domain=string" property prepended, which will list the top-level urlbar
domain that was used to source the third party element.
     </para>
    </listitem>
    <listitem>HTTP Auth
     <para>

HTTP authentication tokens are removed for third party elements using the
<ulink
url="https://developer.mozilla.org/en/Setting_HTTP_request_headers#Observers">http-on-modify-request
observer</ulink> to remove the Authorization headers to prevent <ulink
url="http://jeremiahgrossman.blogspot.com/2007/04/tracking-users-without-cookies.html">silent
linkability between domains</ulink>.  We also needed to <ulink
url="https://gitweb.torproject.org/torbrowser.git/blob/refs/heads/maint-2.2:/src/current-patches/0004-Add-HTTP-auth-headers-before-the-modify-request-obse.patch">patch
Firefox to cause the headers to get added early enough</ulink> to allow the
observer to modify it.

     </para>
    </listitem>
    <listitem>DOM Storage
     <para><command>Design Goal:</command>

DOM storage for third party domains MUST BE isolated to the url bar domain,
to prevent linkability between sites.

     </para>
     <para><command>Implementation Status:</command>

Because it is isolated to third party domain as opposed to top level url bar
domain, we entirely disable DOM storage as a stopgap to ensure unlinkability.

     </para>
     </listitem>
    <listitem>TLS session resumption and HTTP Keep-Alive
     <para>
TLS session resumption and HTTP Keep-Alive must not allow third party origins
to track users via either TLS session IDs, or the fact that different requests
arrive on the same TCP connection.
     </para>
     <para><command>Design Goal:</command>

TLS session resumption IDs must be limited to the top-level url bar domain.
HTTP Keep-Alive connections from a third party in one top-level domain must
not be reused for that same third party in another top-level domain.

     </para>
     <para><command>Implementation Status:</command>

We <ulink url="https://trac.torproject.org/projects/tor/ticket/4099">plan to
disable</ulink> TLS session resumption, and limit HTTP Keep-alive duration. 

     </para>
    </listitem>
    <listitem>window.name
     <para>

<ulink
url="https://developer.mozilla.org/En/DOM/Window.name">window.name</ulink> is
a magical DOM property that for some reason is allowed to retain a persistent value
for the lifespan of a browser tab. It is possible to utilize this property for
<ulink url="http://www.thomasfrank.se/sessionvars.html">identifier
storage</ulink>.

     </para>
     <para>

In order to eliminate linkability but still allow for sites that utilize this
property to function, we reset the window.name property of tabs in Torbutton every
time we encounter a blank referer. This behavior allows window.name to persist
for the duration of a link-driven navigation session, but as soon as the user
enters a new URL or navigates between https/http schemes, the property is cleared.

     </para>
    </listitem>
    <listitem>Exit node usage
     <para><command>Design Goal:</command>

Every distinct navigation session (as defined by a non-blank referer header)
MUST exit through a fresh Tor circuit in Tor Browser to prevent exit node
observers from linking concurrent browsing activity.

     </para>
     <para><command>Implementation Status:</command>

The Tor feature that supports this ability only exists in the 0.2.3.x-alpha
series. <ulink
url="https://trac.torproject.org/projects/tor/ticket/3455">Ticket
#3455</ulink> is the Torbutton ticket to make use of the new Tor
functionality.

     </para>
    </listitem>
   </orderedlist>
  </sect2>
  <sect2 id="fingerprinting-linkability">
   <title>Cross-Domain Fingerprinting Unlinkability</title>
   <para>

In order to properly address the fingerprinting adversary on a technical
level, we need a metric to measure linkability of the various browser
properties that extend beyond any stored origin-related state. <ulink
url="https://panopticlick.eff.org/about.php">The Panopticlick Project</ulink>
by the EFF provides us with exactly this metric. The researchers conducted a
survey of volunteers who were asked to visit an experiment page that harvested
many of the above components. They then computed the Shannon Entropy of the
resulting distribution of each of several key attributes to determine how many
bits of identifying information each attribute provided.

   </para>
   <para>

The study is not exhaustive, though. In particular, the test does not take in
all aspects of resolution information. It did not calculate the size of
widgets, window decoration, or toolbar size, which we believe may add high
amounts of entropy. It also did not measure clock offset and other time-based
fingerprints. Furthermore, as new browser features are added, this experiment
should be repeated to include them.

   </para>
   <para>

On the other hand, to avoid an infinite sinkhole, we reduce the efforts for
fingerprinting resistance by only concerning ourselves with reducing the
fingerprintable differences <emphasis>among</emphasis> Tor Browser users. We
do not believe it is productive to concern ourselves with cross-browser
fingerprinting issues, at least not at this stage.

   </para>
   <orderedlist>
    <listitem>Plugins
     <para>

Plugins add to fingerprinting risk via two main vectors: their mere presence in
window.navigator.plugins, as well as their internal functionality.

     </para>
     <para><command>Design Goal:</command>

All plugins that have not been specifically audited or sandboxed must be
disabled. To reduce linkability potential, even sandboxed plugins should not
be allowed to load objects until the user has clicked through a click-to-play
barrier.  Additionally, version information should be reduced or obfuscated
until the plugin object is loaded.

     </para>
     <para><command>Implementation Status:</command>

Currently, we entirely disable all plugins in Tor Browser. However, as a
compromise due to the popularity of Flash, we intend to <ulink
url="https://trac.torproject.org/projects/tor/ticket/3974">work
towards</ulink> a
click-to-play barrier using NoScript that is available only after the user has
specifically enabled plugins. Flash will be the only plugin available, and we
will ship a settings.sol file to disable Flash cookies, and to restrict P2P
features that likely bypass proxy settings.

     </para>
    </listitem>
    <listitem>Fonts
     <para>

According to the Panopticlick study, fonts provide the most linkability when
they are provided as an enumerable list in filesystem order, via either the
Flash or Java plugins. However, it is still possible to use CSS and/or
Javascript to query for the existence of specific fonts. With a large enough
pre-built list to query, a large amount of fingerprintable information may
still be available.

     </para>
     <para><command>Design Goal:</command>

To address the Javascript issue, we intend to <ulink
url="https://trac.torproject.org/projects/tor/ticket/2872">limit the number of
fonts</ulink> an origin can load, gracefully degrading to built-in and/or
remote fonts once the limit is reached.

     </para>
     <para><command>Implementation Status:</command>

Aside from disabling plugins to prevent enumeration, we have not yet
implemented any defense against CSS or Javascript fonts.

     </para>
    </listitem>
    <listitem>User Agent and HTTP Headers
     <para><command>Design Goal:</command>

All Tor Browser users should provide websites with an identical user agent and
HTTP header set for a given request type. We omit the Firefox minor revision,
and report a popular Windows platform. If the software is kept up to date,
these headers should remain identical across the population even when updated.

     </para>
     <para><command>Implementation Status:</command>

Firefox provides several options for controlling the browser user agent string
which we leverage. We also set similar prefs for controlling the
Accept-Language and Accept-Charset headers, which we spoof to English by default. Additionally, we
<ulink
url="https://gitweb.torproject.org/torbrowser.git/blob/refs/heads/maint-2.2:/src/current-patches/0001-Block-Components.interfaces-lookupMethod-from-conten.patch">remove
content script access</ulink> to Components.interfaces, which <ulink
url="http://pseudo-flaw.net/tor/torbutton/fingerprint-firefox.html">can be
used</ulink> to fingerprint OS, platform, and Firefox minor version.  </para>

    </listitem>
    <listitem>Desktop resolution and CSS Media Queries
     <para>

Both CSS and Javascript have a lot of irrelevant information about the screen
resolution, usable desktop size, OS widget size, toolbar size, title bar size, and
other desktop features that are not at all relevant to rendering and serve
only to provide information for fingerprinting.

     </para>
     <para><command>Design Goal:</command>

Our design goal here is to reduce the resolution information down to the bare
minimum required for properly rendering inside a content window. We intend to 
report all rendering information correctly with respect to the size and
properties of the content window, but report an effective size of 0 for all
border material, and also report that the desktop is only as big as the
inner content window. Additionally, new browser windows are sized such that 
their content windows are one of ~5 fixed sizes based on the user's
desktop resolution.

     </para>
     <para><command>Implementation Status:</command>

We have implemented the above strategy for Javascript using Torbutton's <ulink
url="https://gitweb.torproject.org/torbutton.git/blob/HEAD:/src/chrome/content/jshooks4.js">JavaScript
hooks</ulink> as well as a window observer to <ulink
url="https://gitweb.torproject.org/torbutton.git/blob/HEAD:/src/chrome/content/torbutton.js#l4002">resize
new windows based on desktop resolution</ulink>. However, CSS Media Queries
still <ulink url="https://trac.torproject.org/projects/tor/ticket/2875">need
to be dealt with</ulink>.

     </para>
    </listitem>
    <listitem>Timezone and clock offset
     <para><command>Design Goal:</command>

All Tor Browser users should report the same timezone to websites. Currently,
we choose UTC for this purpose, although an equally valid argument could be
made for EDT/EST due to the large English-speaking population density.
Additionally, the Tor software should detect if the users clock is
significantly divergent from the clocks of the relays that it connects to, and
use this to reset the clock values used in Tor Browser to something reasonably
accurate.

     </para>
     <para><command>Implementation Status:</command>

We set the timezone using the TZ environment variable, which is supported on
all platforms. Additionally, we plan to <ulink
url="https://trac.torproject.org/projects/tor/ticket/3652">obtain a clock
offset from Tor</ulink>, but this won't be available until Tor 0.2.3.x is in
use.

     </para>
    </listitem>
    <listitem>Javascript performance fingerprinting
     <para>

<ulink url="http://w2spconf.com/2011/papers/jspriv.pdf">Javascript performance
fingerprinting</ulink> is the act of profiling the performance
of various Javascript functions for the purpose of fingerprinting the
Javascript engine and the CPU.

     </para>
     <para><command>Design Goal:</command>

We have <ulink
url="https://trac.torproject.org/projects/tor/ticket/3059">several potential
mitigation approaches</ulink> to reduce the accuracy of performance
fingerprinting without risking too much damage to functionality. Our current
favorite is to reduce the resolution of the Event.timeStamp and the Javascript
Date() object, while also introducing jitter. Our goal is to increase the
amount of time it takes to mount a successful attack. <ulink
url="http://w2spconf.com/2011/papers/jspriv.pdf">Mowery et al</ulink> found that
even with the default precision in most browsers, they required up to 120
seconds of amortization and repeated trials to get stable results from their
feature set. We intend to work with the research community to establish the
optimum tradeoff between quantization+jitter and amortization time.


     </para>
     <para><command>Implementation Status:</command>

We have no implementation as of yet.

     </para>
    </listitem>
    <listitem>Keystroke fingerprinting
     <para>

Keystroke fingerprinting is the act of measuring key strike time and key
flight time. It is seeing increasing use as a biometric.

     </para>
     <para><command>Design Goal:</command>

We intend to rely on the same mechanisms for defeating Javascript performance
fingerprinting: timestamp quantization and jitter.

     </para>
     <para><command>Implementation Status:</command>
We have no implementation as of yet.
     </para>
    </listitem>
    <listitem>WebGL
     <para>

WebGL is fingerprintable both through information that is exposed about the
underlying driver and optimizations, as well as through performance
fingerprinting.

     </para>
     <para><command>Design Goal:</command>

Because of the large amount of potential fingerprinting vectors, we intend to
deploy a similar strategy against WebGL as for plugins. First, WebGL canvases
will have click-to-play placeholders, and will not run until authorized by the
user. Second, we intend to <ulink
url="https://trac.torproject.org/projects/tor/ticket/3323">obfuscate driver
information</ulink> by hooking
<command>getParameter()</command>,
<command>getSupportedExtensions()</command>,
<command>getExtension()</command>, and
<command>getContextAttributes()</command> to provide standard minimal,
driver-neutral information.

     </para>
     <para><command>Implementation Status:</command>

Currently we simply disable WebGL. 

     </para>
    </listitem>
   </orderedlist>
  </sect2>
  <sect2 id="new-identity">
   <title>Long-Term Unlinkability via "New Identity" button</title>
   <para>
In order to avoid long-term linkability, we provide a "New Identity" context
menu option in Torbutton.
   </para>

   <sect3>
    <title>Design Goal:</title>
    <blockquote>

All linkable identifiers and browser state should be cleared by this feature.

    </blockquote>
   </sect3>

   <sect3>
    <title>Implementation Status:</title>
    <blockquote>
   First, Torbutton disables
all open tabs and windows via nsIContentPolicy blocking, and then closes each
tab and window. The extra step for blocking tabs is done as a precaution to
ensure that any asynchronous Javascript is in fact properly disabled. After
closing all of the windows, we then clear the following state: OCSP (by
toggling security.OCSP.enabled), cache, site-specific zoom and content
preferences, Cookies, DOM storage, safe browsing key, the Google wifi
geolocation token (if exists), HTTP auth, SSL Session IDs, and the last opened URL
field (via the pref general.open_location.last_url). After clearing the
browser state, we then send the NEWNYM signal to the Tor control port to cause
a new circuit to be created.
    </blockquote>
   </sect3>

   <para>
XXX: Cookie protections..
<!-- XXX: Missing pieces: 
          1. DOM Storage? IIRC, it is cleared, but also disabled anyway. 
          2. Do we kill keep-alive connections properly?
  -->
   </para>
  </sect2>
  <sect2 id="click-to-play">
   <title>Click-to-play for plugins and invasive content</title>
   <para>
Some content types are too invasive and/or too opaque for us to properly
eliminate their linkability properties. For these content types, we use
NoScript to provide click-to-play placeholders that do not activate the
content until the user clicks on it. This will eliminate the ability for an
adversary to use such content types to link users in a dragnet fashion across
arbitrary sites.
   </para>
   <para>
Currently, the content types isolated in this way include Flash, WebGL, and
audio and video objects.
   </para>
  </sect2>
  <sect2 id="firefox-patches">
   <title>Description of Firefox Patches</title>
   <para>
The set of patches we have against Firefox can be found in the <ulink
url="https://gitweb.torproject.org/torbrowser.git/tree/refs/heads/maint-2.2:/src/current-patches">current-patches
directory of the torbrowser git repository</ulink>. They are:
   </para>
   <orderedlist>
    <listitem>Block Components.interfaces and Components.lookupMethod
     <para>

In order to reduce fingerprinting, we block access to these two interfaces
from content script. Components.lookupMethod can undo our <ulink
url="https://gitweb.torproject.org/torbutton.git/blob/HEAD:/src/chrome/content/jshooks4.js">Javascript
hooks</ulink>,
and Components.interfaces can be used for fingerprinting the platform, OS, and
Firebox version, but not much else.

     </para>
    </listitem>
    <listitem>Make Permissions Manager memory only
     <para>

This patch exposes a pref 'permissions.memory_only' that properly isolates the
permissions manager to memory, which is responsible for all user specified
site permissions, as well as stored HTTPS STS policy from visited sites.

The pref does successfully clear the permissions manager memory if toggled. It
does not need to be set in prefs.js, and can be handled by Torbutton.

     </para>
     <para><command>Design Goal:</command>

As an additional design goal, we would like to later alter this patch to allow this
information to be cleared from memory. The implementation does not currently
allow this.

     </para>
    </listitem>
    <listitem>Make Intermediate Cert Store memory-only
     <para>

The intermediate certificate store holds information about SSL certificates
that may only be used by a limited number of domains. In some cases
effectively recording on disk the fact that a website owned by a certain
organization was viewed.

     </para>
     <!-- FIXME: Should this be a <note> tag too? -->
     <para><command>Design Goal:</command>

As an additional design goal, we would like to later alter this patch to allow this
information to be cleared from memory. The implementation does not currently
allow this.

     </para>
    </listitem>
    <listitem>Add HTTP auth headers before on-modify-request fires
     <para>

This patch provides a trivial modification to allow us to properly remove HTTP
auth for third parties. This patch allows us to defend against an adversary
attempting to use <ulink
url="http://jeremiahgrossman.blogspot.com/2007/04/tracking-users-without-cookies.html">HTTP
auth to silently track users between domains</ulink>.

     </para>
    </listitem>
    <listitem>Add a string-based cacheKey property for domain isolation
     <para>

To <ulink
url="https://trac.torproject.org/projects/tor/ticket/3666">increase the
security of cache isolation</ulink> and to <ulink
url="https://trac.torproject.org/projects/tor/ticket/3754">solve strange and
unknown conflicts with OCSP</ulink>, we had to <ulink
url="https://gitweb.torproject.org/torbrowser.git/blob/refs/heads/maint-2.2:/src/current-patches/0005-Add-a-string-based-cacheKey.patch">patch
Firefox to provide a cacheDomain cache attribute</ulink>. We use the full
url bar domain as input to this field.

     </para>
    </listitem>
    <listitem>Randomize HTTP pipeline order and depth
     <para>
As an 
<ulink
url="https://blog.torproject.org/blog/experimental-defense-website-traffic-fingerprinting">experimental
defense against Website Traffic Fingerprinting</ulink>, we patch the standard
HTTP pipelining code to randomize the number of requests in a
pipeline, as well as their order.
     </para>
    </listitem>
    <listitem>Block all plugins except flash
     <para>
We cannot use the <ulink
url="http://www.oxymoronical.com/experiments/xpcomref/applications/Firefox/3.5/components/@mozilla.org/extensions/blocklist%3B1">
@mozilla.org/extensions/blocklist;1</ulink> service, because we
actually want to stop plugins from ever entering the browser's process space
and/or executing code (for example, AV plugins that collect statistics/analyze
URLs, magical toolbars that phone home or "help" the user, skype buttons that
ruin our day, and censorship filters). Hence we rolled our own.
     </para>
    </listitem>
    <listitem>Make content-prefs service memory only
     <para>
This patch prevents random URLs from being inserted into content-prefs.sqllite in
the profile directory as content prefs change (includes site-zoom and perhaps
other site prefs?).
     </para>
    </listitem>
   </orderedlist>
  </sect2>

</sect1>

<!--
- Packaging
  - Build Process Security
  - External Addons
    - Included
      - HTTPS-E
      - NoScript
      - Torbutton
    - Deliberately excluded
      - Request Policy, AdblockPlus, etc
    - Desired
      - Perspectives/Convergence/etc
  - Pref Changes
    - Caused by Torbutton
    - Set manually in profile
  - Update security
    - Thandy
-->

<sect1 id="Packaging">
  <title>Packaging</title>
  <para> </para>
  <sect2 id="build-security">
   <title>Build Process Security</title>
   <para> </para>
  </sect2>
  <sect2 id="addons">
   <title>External Addons</title>
   <para> </para>
   <sect3>
    <title>Included Addons</title>
   </sect3>
   <sect3>
    <title>Excluded Addons</title>
    <!-- XXX: Adblock, RequestPolicy, ShareMeNot, priv3 -->
   </sect3>
   <sect3>
    <title>Dangerous Addons</title>
   </sect3>
  </sect2>
  <sect2 id="prefs">
   <title>Pref Changes</title>
   <para> </para>
  </sect2>
  <sect2 id="update-mechanism">
   <title>Update Security</title>
   <para> </para>
  </sect2>
</sect1>

<sect1 id="Testing">
  <title>Testing</title>
  <para>

The purpose of this section is to cover all the known ways that Tor browser
security can be subverted from a penetration testing perspective. The hope
is that it will be useful both for creating a &quot;Tor Safety Check&quot;
page, and for developing novel tests and actively attacking Torbutton with the
goal of finding vulnerabilities in either it or the Mozilla components,
interfaces and settings upon which it relies.

  </para>
  <sect2 id="SingleStateTesting">
   <title>Single state testing</title>
   <para>

Torbutton is a complicated piece of software. During development, changes to
one component can affect a whole slough of unrelated features.  A number of
aggregated test suites exist that can be used to test for regressions in
Torbutton and to help aid in the development of Torbutton-like addons and
other privacy modifications of other browsers. Some of these test suites exist
as a single automated page, while others are a series of pages you must visit
individually. They are provided here for reference and future regression
testing, and also in the hope that some brave soul will one day decide to
combine them into a comprehensive automated test suite.

     <!-- XXX: ip-check.info? -->
     <orderedlist>
      <listitem><ulink url="http://decloak.net/">Decloak.net</ulink>
       <para>

Decloak.net is the canonical source of plugin and external-application based
proxy-bypass exploits. It is a fully automated test suite maintained by <ulink
url="http://digitaloffense.net/">HD Moore</ulink> as a service for people to
use to test their anonymity systems.

       </para>
      </listitem>
      <listitem><ulink url="http://deanonymizer.com/">Deanonymizer.com</ulink>
       <para>

Deanonymizer.com is another automated test suite that tests for proxy bypass
and other information disclosure vulnerabilities. It is maintained by Kyle
Williams, the author of <ulink url="http://www.janusvm.com/">JanusVM</ulink>
and <ulink url="http://www.januspa.com/">JanusPA</ulink>.

       </para>
      </listitem>
      <listitem><ulink url="https://www.jondos.de/en/anontest">JonDos
AnonTest</ulink>
       <para>

The <ulink url="https://www.jondos.de">JonDos people</ulink> also provide an
anonymity tester. It is more focused on HTTP headers than plugin bypass, and
points out a couple of headers Torbutton could do a better job with
obfuscating.

       </para>
      </listitem>
      <listitem><ulink url="http://browserspy.dk">Browserspy.dk</ulink>
       <para>

Browserspy.dk provides a tremendous collection of browser fingerprinting and
general privacy tests. Unfortunately they are only available one page at a
time, and there is not really solid feedback on good vs bad behavior in
the test results.

       </para>
      </listitem>
      <listitem><ulink url="http://analyze.privacy.net/">Privacy
Analyzer</ulink>
       <para>

The Privacy Analyzer provides a dump of all sorts of browser attributes and
settings that it detects, including some information on your origin IP
address. Its page layout and lack of good vs bad test result feedback makes it
not as useful as a user-facing testing tool, but it does provide some
interesting checks in a single page.

       </para>
      </listitem>
      <listitem><ulink url="http://ha.ckers.org/mr-t/">Mr. T</ulink>
       <para>

Mr. T is a collection of browser fingerprinting and deanonymization exploits
discovered by the <ulink url="http://ha.ckers.org">ha.ckers.org</ulink> crew
and others. It is also not as user friendly as some of the above tests, but it
is a useful collection.

       </para>
      </listitem>
      <listitem>Gregory Fleischer's <ulink
url="http://pseudo-flaw.net/content/tor/torbutton/">Torbutton</ulink> and
<ulink
url="http://pseudo-flaw.net/content/defcon/dc-17-demos/d.html">Defcon
17</ulink> Test Cases
       <para>

Gregory Fleischer has been hacking and testing Firefox and Torbutton privacy
issues for the past 2 years. He has an excellent collection of all his test
cases that can be used for regression testing. In his Defcon work, he
demonstrates ways to infer Firefox version based on arcane browser properties.
We are still trying to determine the best way to address some of those test
cases.

       </para>
      </listitem>
      <listitem><ulink url="https://torcheck.xenobite.eu/index.php">Xenobite's
TorCheck Page</ulink>
       <para>

This page checks to ensure you are using a valid Tor exit node and checks for
some basic browser properties related to privacy. It is not very fine-grained
or complete, but it is automated and could be turned into something useful
with a bit of work.

       </para>
      </listitem>
     </orderedlist>
    </para>
  </sect2>
<!--
  <sect2>
   <title>Multi-state testing</title>
   <para>

The tests in this section are geared towards a page that would instruct the
user to toggle their Tor state after the fetch and perform some operations:
mouseovers, stray clicks, and potentially reloads.

   </para>
   <sect3>
    <title>Cookies and Cache Correlation</title>
    <para>
The most obvious test is to set a cookie, ask the user to toggle tor, and then
have them reload the page. The cookie should no longer be set if they are
using the default Torbutton settings. In addition, it is possible to leverage
the cache to <ulink
url="http://crypto.stanford.edu/sameorigin/safecachetest.html">store unique
identifiers</ulink>. The default settings of Torbutton should also protect
against these from persisting across Tor Toggle.

    </para>
   </sect3>
   <sect3>
    <title>Javascript timers and event handlers</title>
    <para>

Javascript can set timers and register event handlers in the hopes of fetching
URLs after the user has toggled Torbutton. 
    </para>
   </sect3>
   <sect3>
    <title>CSS Popups and non-script Dynamic Content</title>
    <para>

Even if Javascript is disabled, CSS is still able to 
<ulink url="http://www.tjkdesign.com/articles/css%20pop%20ups/">create popup-like
windows</ulink>
via the 'onmouseover' CSS attribute, which can cause arbitrary browser
activity as soon as the mouse enters into the content window. It is also
possible for meta-refresh tags to set timers long enough to make it likely
that the user has toggled Tor before fetching content.

    </para>
   </sect3>
  </sect2>
  <sect2 id="HackTorbutton">
   <title>Active testing (aka How to Hack Torbutton)</title>
   <para>

The idea behind active testing is to discover vulnerabilities in Torbutton to
bypass proxy settings, run script in an opposite Tor state, store unique
identifiers, leak location information, or otherwise violate <link
linkend="requirements">its requirements</link>. Torbutton has ventured out
into a strange and new security landscape. It depends on Firefox mechanisms
that haven't necessarily been audited for security, certainly not for the
threat model that Torbutton seeks to address. As such, it and the interfaces
it depends upon still need a 'trial by fire' typical of new technologies. This
section of the document was written with the intention of making that period
as fast as possible. Please help us get through this period by considering
these attacks, playing with them, and reporting what you find (and potentially
submitting the test cases back to be run in the standard batch of Torbutton
tests.

   </para>
   <sect3>
    <title>Some suggested vectors to investigate</title>
    <para>
    <itemizedlist>
     <listitem>Strange ways to register Javascript <ulink
url="http://en.wikipedia.org/wiki/DOM_Events">events</ulink> and <ulink
url="http://www.devshed.com/c/a/JavaScript/Using-Timers-in-JavaScript/">timeouts</ulink> should
be verified to actually be ineffective after Tor has been toggled.</listitem>
     <listitem>Other ways to cause Javascript to be executed after
<command>javascript.enabled</command> has been toggled off.</listitem>
     <listitem>Odd ways to attempt to load plugins. Kyle Williams has had
some success with direct loads/meta-refreshes of plugin-handled URLs.</listitem>
     <listitem>The Date and Timezone hooks should be verified to work with
crazy combinations of iframes, nested iframes, iframes in frames, frames in
iframes, and popups being loaded and
reloaded in rapid succession, and/or from one another. Think race conditions and deep, 
parallel nesting, involving iframes from both <ulink
url="http://en.wikipedia.org/wiki/Same_origin_policy">same-origin and
non-same-origin</ulink> domains.</listitem>
     <listitem>In addition, there may be alternate ways and other
methods to query the timezone, or otherwise use some of the Date object's
methods in combination to deduce the timezone offset. Of course, the author
tried his best to cover all the methods he could foresee, but it's always good
to have another set of eyes try it out.</listitem>
     <listitem>Similarly, is there any way to confuse the <link
linkend="contentpolicy">content policy</link>
mentioned above to cause it to allow certain types of page fetches? For
example, it was recently discovered that favicons are not fetched by the
content, but the chrome itself, hence the content policy did not look up the
correct window to determine the current Tor tag for the favicon fetch. Are
there other things that can do this? Popups? Bookmarklets? Active bookmarks? </listitem>
     <listitem>Alternate ways to store and fetch unique identifiers. For example, <ulink
url="http://developer.mozilla.org/en/docs/DOM:Storage">DOM Storage</ulink>
caught us off guard. 
It was
also discovered by <ulink url="http://pseudo-flaw.net">Gregory
Fleischer</ulink> that <ulink
url="http://pseudo-flaw.net/content/tor/torbutton/">content window access to
chrome</ulink> can be used to build <link linkend="fingerprinting">unique
identifiers</link>. 
Are there any other
arcane or experimental ways that Firefox provides to create and store unique
identifiers? Or perhaps unique identifiers can be queried or derived from
properties of the machine/browser that Javascript has access to? How unique
can these identifiers be?
     </listitem>
     <listitem>Is it possible to get the browser to write some history to disk
(aside from swap) that can be retrieved later? By default, Torbutton should
write no history, cookie, or other browsing activity information to the
harddisk.</listitem>
     <listitem>Do popup windows make it easier to break any of the above
behavior? Are javascript events still canceled in popups? What about recursive
popups from Javascript, data, and other funky URL types? What about CSS
popups? Are they still blocked after Tor is toggled?</listitem>
     <listitem>Chrome-escalation attacks. The interaction between the
Torbutton chrome Javascript and the client content window javascript is pretty
well-defined and carefully constructed, but perhaps there is a way to smuggle
javascript back in a return value, or otherwise inject network-loaded
javascript into the chrome (and thus gain complete control of the browser).
</listitem>
</itemizedlist>

    </para>
   </sect3>
  </sect2>
-->
</sect1>
</article>
